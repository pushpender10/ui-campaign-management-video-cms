// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  username      String?  @unique
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?

  accounts Account[]
  sessions Session[]
  videos   Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

enum VideoStatus {
  PENDING
  PROCESSING
  READY
  FAILED
}

enum VideoPrivacy {
  PUBLIC
  PRIVATE
}

model Video {
  id                String      @id @default(cuid())
  userId            String
  title             String
  description       String?
  category          String?
  privacy           VideoPrivacy @default(PUBLIC)
  originalFilePath  String
  hlsManifestPath   String?
  thumbnailPath     String?
  duration          Int         @default(0)
  file_size         Int         @default(0)
  status            VideoStatus @default(PENDING)
  progressPercent   Int         @default(0)
  errorMessage      String?
  campaignStartDate DateTime
  campaignEndDate   DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
}
